{
  "version": 3,
  "file": "supermarket.js",
  "sourceRoot": "",
  "sources": [
    "supermarket.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA;;EAqCA,MAAM,CAAC,OAAP,GAAuB,cAAN,MAAA,YAAA,CAAA;;IAGO,OAArB,kBAAqB,CAAC,KAAD,EAAO,mBAAP,EAA2B,iBAA3B,CAAA;AAEpB,UAAA;MAAA,IAAG,mBAAH;QACE,IAAG,iBAAH;UACE,MAAA,GAAS,gBADX;SAAA,MAAA;UAGE,MAAA,GAAS,gBAHX;SADF;OAAA,MAAA;QAME,IAAG,KAAA,GAAQ,GAAX;UACE,MAAA,GAAS,WADX;SAAA,MAAA;UAGE,MAAA,GAAS,aAHX;SANF;;AAWA,aAAO;IAba;;EAHP;AArCjB",
  "sourcesContent": [
    "###\r\n this simple file emulates the logic as exercise in the supermarket example\r\n the logic inputs are\r\n isLoyaltyCardHolder ?\r\n discountPreferred - if the loyalty card holder would prefer discounts\r\n points preferred - if the loyalty card holder would prefer loyalty points\r\n These two options are mututally exclusive, so only one will be used\r\n in a \"real\" system, setters would ensure that setting one, with the other to the opposite value\r\n spendOver100 - whether the customer spend is over 100 - this is used to determine whether a  non loyalty card holder qualifies for a discount\r\n\r\n inputs :\r\n isLoyaltyCardHolder\r\n discountPreferred\r\n spendOver100\r\n\r\n because the functional spec is unclear as to how to calculate the discounts and points offered to\r\n loyalty card holders and cash customers, we will return a string indicating one of the\r\n\r\n only one result/action is possible for any given transaction, therefore we can return the value\r\n 3 possible actions\r\n noDiscount - cash customer, spend <= 100     opposite of discount bellow\r\n discount  - cash customer, spend > 100       opp of noDiscount above - mutually exclusive\r\n extraDiscount - loyalty card holder, discount preferred\r\n loyaltyPoints - loyalty card holder, points preferred\r\n\r\n we could \"stub\" out the functions which will carry out these actions\r\n this allows us to write the code (like a driver) before the full implementations are available.\r\n It also allows us to test the software, as it allows us to return calculated reults, but\r\n testing the logic is sufficient for illustration\r\n\r\n a more realistic model for the isLoyaltyCardHiolder, would be whether a loyalty card was presented\r\n at the till - the system would then look up the card number, and determine the customers\r\n preference - discounts or points\r\n\r\n###\r\n\r\n\r\nmodule.exports = class Supermarket\r\n\r\n  # static method called using class name\r\n  @processTransaction : (spend,isLoyaltyCardHolder,discountPreferred) ->\r\n\r\n    if isLoyaltyCardHolder\r\n      if discountPreferred\r\n        action = \"loyaltyPoints\"\r\n      else\r\n        action = \"extraDiscount\"\r\n    else\r\n      if spend > 100\r\n        action = \"discount\"\r\n      else\r\n        action = \"noDiscount\"\r\n\r\n    return action"
  ]
}