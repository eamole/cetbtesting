{
  "version": 3,
  "file": "insurance.js",
  "sourceRoot": "",
  "sources": [
    "insurance.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,MAAA,EAAA;;EAAA,MAAA,GAAS,OAAA,CAAQ,MAAR,CAAe,CAAC;;EACzB,kBAAA,GAAqB,OAAA,CAAQ,kBAAR,EADrB;;;;;;EAOA,QAAA,CAAS,6BAAT,EAAyC,QAAA,CAAA,CAAA;WACvC,QAAA,CAAS,mBAAT,EAA+B,QAAA,CAAA,CAAA,EAAA;;MAG7B,QAAA,CAAS,uBAAT,EAAmC,QAAA,CAAA,CAAA;QAEjC,EAAA,CAAG,qCAAH,EAA2C,QAAA,CAAA,CAAA;iBACzC,MAAA,CAAO,kBAAA,CAAmB,IAAnB,EAA0B,IAA1B,EAAiC,IAAjC,CAAP,EAAgD,mBAAhD;QADyC,CAA3C;QAGA,EAAA,CAAG,0CAAH,EAAgD,QAAA,CAAA,CAAA;iBAC9C,MAAA,CAAO,kBAAA,CAAmB,IAAnB,EAA0B,IAA1B,EAAiC,KAAjC,CAAP,EAAkD,iBAAlD;QAD8C,CAAhD;eAGA,EAAA,CAAG,wDAAH,EAA8D,QAAA,CAAA,CAAA;iBAC5D,MAAA,CAAO,kBAAA,CAAmB,IAAnB,EAA0B,KAA1B,EAAmC,KAAnC,CAAP,EAAoD,aAApD;QAD4D,CAA9D;MARiC,CAAnC;aAWA,QAAA,CAAS,6BAAT,EAAyC,QAAA,CAAA,CAAA;eAEvC,EAAA,CAAG,sDAAH,EAA4D,QAAA,CAAA,CAAA;iBAC1D,MAAA,CAAO,kBAAA,CAAmB,KAAnB,EAA2B,KAA3B,EAAmC,KAAnC,CAAP,EAAoD,aAApD;QAD0D,CAA5D;MAFuC,CAAzC;IAd6B,CAA/B;EADuC,CAAzC;AAPA",
  "sourcesContent": [
    "assert = require(\"chai\").assert\r\ncomputeEligibility = require \"../src/insurance\"\r\n###\r\n  note \"XXX\" in inputs means the value is irrelevant to the decision process\r\n  in reality you would probably not pass ANY value in - depending on how the coder designed the system\r\n###\r\n\r\ndescribe \"Insurance Company Flotation\" , ->\r\n  describe \"Eligibility Calcs\" , ->\r\n\r\n# the big split\r\n    describe \"Current Policy Holder\" , ->\r\n\r\n      it \"should offer shares : full benefits\" , ->\r\n        assert computeEligibility(true , true , true) , \"eligibleForShares\"\r\n\r\n      it \"should return cash only : not since 2001\" , ->\r\n        assert computeEligibility(true , true , false ) , \"eligibleForCash\"\r\n\r\n      it \"should return notEligible - not 'with benefits' policy\" , ->\r\n        assert computeEligibility(true , false  , \"XXX\" ) , \"notEligible\"\r\n\r\n    describe \"Not A Current Policy Holder\" , ->\r\n\r\n      it \"should return notEligible - not current policyholder\" , ->\r\n        assert computeEligibility(false , \"XXX\" , \"XXX\" ) , \"notEligible\"\r\n"
  ]
}