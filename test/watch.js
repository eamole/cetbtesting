// Generated by CoffeeScript 2.3.1
(function() {
  var AltMode, HrsMode, MinsMode, TimeMode, Watch, assert;

  assert = require("chai").assert;

  ({Watch, TimeMode, AltMode, HrsMode, MinsMode} = require("../src/watch"));

  describe("Watch", function() {
    return describe("Test BOTH Inputs in All States", function() {
      describe("Mode = TIME - test both inputs SET and MODE ", function() {
        it("should be ALT : TIME <- [MODE] => ALT ", function() {
          Watch.mode = TimeMode; // ensure correct mode
          Watch.modeButton();
          return assert.equal(Watch.mode, AltMode);
        });
        return it("TIME <- [SET] : should be HRS", function() {
          Watch.mode = TimeMode; // reset to correct mode
          return assert.equal(Watch.setButton(), HrsMode);
        });
      });
      describe("Mode = ALT - test both inputs SET and MODE ", function() {
        it("should be TIME : ALT <- [MODE]", function() {
          Watch.mode = AltMode; // ensure correct mode
          return assert.equal(Watch.modeButton(), TimeMode);
        });
        return it("should be ALT - No action : ALT <- [SET]", function() {
          var mode;
          Watch.mode = AltMode; // reset to correct mode
          mode = AltMode;
          return assert.equal(Watch.setButton(), mode);
        });
      });
      //#
      describe("Mode = HRS - test both inputs SET and MODE ", function() {
        it("should be MINS : HRS <- [MODE]", function() {
          Watch.mode = HrsMode; // ensure correct mode
          return assert.equal(Watch.modeButton(), MinsMode);
        });
        it("should be HRS - No change state HRS <- [SET]", function() {
          Watch.mode = HrsMode; // reset to correct mode
          return assert.equal(Watch.setButton(), HrsMode);
        });
        it("should change Watch.hours to 1 : HRS <- [SET], time = 00:00", function() {
          return assert.equal(Watch.hrs, 1);
        });
        return it("change Watch.hours should be 2 : HRS <- [SET], time = 01:00 ", function() {
          Watch.setButton(); // call it again
          return assert.equal(Watch.hrs, 2);
        });
      });
      return describe("Mode = MINS - test both inputs SET and MODE ", function() {
        it("should be TIME : MINS <- [MODE]", function() {
          Watch.mode = MinsMode; // ensure correct mode
          return assert.equal(Watch.modeButton(), TimeMode);
        });
        it("should be MINS - No change state : MINS <- [SET] : ", function() {
          Watch.mode = MinsMode; // reset to correct mode
          return assert.equal(Watch.setButton(), MinsMode);
        });
        it("should change Watch.to 1 : MINS <- [SET], time=02:00", function() {
          return assert.equal(Watch.mins, 1);
        });
        return it("change Watch.Mins should be 2 : MINS <- [SET], time=02:01", function() {
          Watch.setButton(); // call it again
          return assert.equal(Watch.mins, 2);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=watch.js.map
