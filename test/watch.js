// Generated by CoffeeScript 2.3.1
(function() {
  var AltMode, HrsMode, MinsMode, TimeMode, Watch, assert, watch;

  assert = require("chai").assert;

  Watch = require("../src/watch").Watch;

  TimeMode = require("../src/watch").TimeMode;

  AltMode = require("../src/watch").AltMode;

  HrsMode = require("../src/watch").HrsMode;

  MinsMode = require("../src/watch").MinsMode;

  debugger;

  watch = Watch;

  watch.modeButton();

  describe("Watch", function() {
    return describe("Test BOTH Inputs in All States", function() {
      describe("Mode = TIME - test both inputs SET and MODE ", function() {
        Watch.mode = TimeMode; // ensure correct mode
        it("TIME <- [MODE] : should be ALT", function() {
          return assert(Watch.modeButton(), AltMode);
        });
        Watch.mode = TimeMode; // reset to correct mode
        return it("TIME <- [SET] : should be HRS", function() {
          return assert(Watch.setButton(), HrsMode);
        });
      });
      describe("Mode = ALT - test both inputs SET and MODE ", function() {
        Watch.mode = AltMode; // ensure correct mode
        it("ALT <- [MODE] : should be TIME", function() {
          return assert(Watch.modeButton(), TimeMode);
        });
        Watch.mode = AltMode; // reset to correct mode
        return it("ALT <- [SET] : should be ALT - No action", function() {
          return assert(Watch.setButton(), AltMode);
        });
      });
      describe("Mode = HRS - test both inputs SET and MODE ", function() {
        Watch.mode = HrsMode; // ensure correct mode
        it("HRS <- [MODE] : should be MINS", function() {
          return assert(Watch.modeButton(), MinsMode);
        });
        Watch.mode = HrsMode; // reset to correct mode
        it("HRS <- [SET] : should be HRS - No change state", function() {
          return assert(Watch.setButton(), HrsMode);
        });
        return it("HRS <- [SET] : change Watch.hours should be 1", function() {
          return assert(Watch.hrs, 1);
        });
      });
      return describe("Mode = MINS - test both inputs SET and MODE ", function() {
        Watch.mode = MinsMode; // ensure correct mode
        it("MINS <- [MODE] : should be TIME", function() {
          return assert(Watch.modeButton(), TimeMode);
        });
        Watch.mode = MinsMode; // reset to correct mode
        it("MINS <- [SET] : should be MINS - No change state", function() {
          return assert(Watch.setButton(), MinsMode);
        });
        return it("MINS <- [SET] : change Watch.Mins should be 1", function() {
          return assert(Watch.mins, 1);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=watch.js.map
