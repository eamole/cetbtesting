{
  "version": 3,
  "file": "watch.js",
  "sourceRoot": "",
  "sources": [
    "watch.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "assert = require(\"chai\").assert\r\n\r\n{Watch ,TimeMode, AltMode, HrsMode, MinsMode} = require(\"../src/watch\")\r\n\r\n\r\ndescribe \"Watch\", ->\r\n  describe \"Test BOTH Inputs in All States\" , ->\r\n    describe \"Mode = TIME - test both inputs SET and MODE \" , ->\r\n      it \"should be ALT : TIME <- [MODE] => ALT \" , ->\r\n        Watch.mode = TimeMode # ensure correct mode\r\n        Watch.modeButton()\r\n        assert.equal Watch.mode , AltMode\r\n\r\n      it \"TIME <- [SET] : should be HRS\" , ->\r\n        Watch.mode = TimeMode # reset to correct mode\r\n        assert.equal Watch.setButton() , HrsMode\r\n\r\n    describe \"Mode = ALT - test both inputs SET and MODE \" , ->\r\n      it \"should be TIME : ALT <- [MODE]\" , ->\r\n        Watch.mode = AltMode # ensure correct mode\r\n        assert.equal Watch.modeButton() , TimeMode\r\n\r\n      it \"should be ALT - No action : ALT <- [SET]\" , ->\r\n        Watch.mode = AltMode # reset to correct mode\r\n        mode = AltMode\r\n        assert.equal Watch.setButton() , mode\r\n        ##\r\n\r\n    describe \"Mode = HRS - test both inputs SET and MODE \" , ->\r\n      it \"should be MINS : HRS <- [MODE]\" , ->\r\n        Watch.mode = HrsMode # ensure correct mode\r\n        assert.equal Watch.modeButton() , MinsMode\r\n\r\n      it \"should be HRS - No change state HRS <- [SET]\" , ->\r\n        Watch.mode = HrsMode # reset to correct mode\r\n        assert.equal Watch.setButton() , HrsMode\r\n      it \"should change Watch.hours to 1 : HRS <- [SET], time = 00:00\" , ->\r\n        assert.equal Watch.hrs , 1\r\n      it \"change Watch.hours should be 2 : HRS <- [SET], time = 01:00 \" , ->\r\n        Watch.setButton()     # call it again\r\n        assert.equal Watch.hrs , 2\r\n\r\n    describe \"Mode = MINS - test both inputs SET and MODE \" , ->\r\n      it \"should be TIME : MINS <- [MODE]\" , ->\r\n        Watch.mode = MinsMode # ensure correct mode\r\n        assert.equal Watch.modeButton() , TimeMode\r\n\r\n      it \"should be MINS - No change state : MINS <- [SET] : \" , ->\r\n        Watch.mode = MinsMode # reset to correct mode\r\n        assert.equal Watch.setButton() , MinsMode\r\n      it \"should change Watch.to 1 : MINS <- [SET], time=02:00\" , ->\r\n        assert.equal Watch.mins , 1\r\n      it \"change Watch.Mins should be 2 : MINS <- [SET], time=02:01\" , ->\r\n        Watch.setButton() # call it again\r\n        assert.equal Watch.mins , 2\r\n\r\n"
  ]
}